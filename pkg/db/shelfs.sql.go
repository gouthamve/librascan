// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shelfs.sql

package db

import (
	"context"
	"database/sql"
)

const getAllShelfs = `-- name: GetAllShelfs :many
SELECT id, name, rows_count FROM shelfs
`

func (q *Queries) GetAllShelfs(ctx context.Context) ([]Shelf, error) {
	rows, err := q.db.QueryContext(ctx, getAllShelfs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shelf{}
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(&i.ID, &i.Name, &i.RowsCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShelf = `-- name: GetShelf :one
SELECT id, name, rows_count FROM shelfs WHERE id = ?
`

func (q *Queries) GetShelf(ctx context.Context, id int64) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getShelf, id)
	var i Shelf
	err := row.Scan(&i.ID, &i.Name, &i.RowsCount)
	return i, err
}

const getShelfName = `-- name: GetShelfName :one
SELECT name FROM shelfs WHERE id = ?
`

func (q *Queries) GetShelfName(ctx context.Context, id int64) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getShelfName, id)
	var name sql.NullString
	err := row.Scan(&name)
	return name, err
}

const insertShelf = `-- name: InsertShelf :exec
INSERT INTO shelfs (name, rows_count) VALUES (?, ?)
`

type InsertShelfParams struct {
	Name      sql.NullString `json:"name"`
	RowsCount sql.NullInt64  `json:"rows_count"`
}

func (q *Queries) InsertShelf(ctx context.Context, arg InsertShelfParams) error {
	_, err := q.db.ExecContext(ctx, insertShelf, arg.Name, arg.RowsCount)
	return err
}
