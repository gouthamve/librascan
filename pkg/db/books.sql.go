// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package db

import (
	"context"
	"database/sql"
)

const deleteBook = `-- name: DeleteBook :execrows
DELETE FROM books WHERE isbn = ?
`

func (q *Queries) DeleteBook(ctx context.Context, isbn int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteBook, isbn)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT isbn, title, description, publisher, published_date, pages, language, cover_url, shelf_id, row_number 
FROM books
`

type GetAllBooksRow struct {
	Isbn          int64          `json:"isbn"`
	Title         sql.NullString `json:"title"`
	Description   sql.NullString `json:"description"`
	Publisher     sql.NullString `json:"publisher"`
	PublishedDate sql.NullString `json:"published_date"`
	Pages         sql.NullInt64  `json:"pages"`
	Language      sql.NullString `json:"language"`
	CoverUrl      sql.NullString `json:"cover_url"`
	ShelfID       sql.NullInt64  `json:"shelf_id"`
	RowNumber     sql.NullInt64  `json:"row_number"`
}

func (q *Queries) GetAllBooks(ctx context.Context) ([]GetAllBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllBooksRow{}
	for rows.Next() {
		var i GetAllBooksRow
		if err := rows.Scan(
			&i.Isbn,
			&i.Title,
			&i.Description,
			&i.Publisher,
			&i.PublishedDate,
			&i.Pages,
			&i.Language,
			&i.CoverUrl,
			&i.ShelfID,
			&i.RowNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT isbn, title, description, publisher, published_date, pages, language, cover_url, row_number, shelf_id 
FROM books 
WHERE isbn = ?
`

type GetBookRow struct {
	Isbn          int64          `json:"isbn"`
	Title         sql.NullString `json:"title"`
	Description   sql.NullString `json:"description"`
	Publisher     sql.NullString `json:"publisher"`
	PublishedDate sql.NullString `json:"published_date"`
	Pages         sql.NullInt64  `json:"pages"`
	Language      sql.NullString `json:"language"`
	CoverUrl      sql.NullString `json:"cover_url"`
	RowNumber     sql.NullInt64  `json:"row_number"`
	ShelfID       sql.NullInt64  `json:"shelf_id"`
}

func (q *Queries) GetBook(ctx context.Context, isbn int64) (GetBookRow, error) {
	row := q.db.QueryRowContext(ctx, getBook, isbn)
	var i GetBookRow
	err := row.Scan(
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Publisher,
		&i.PublishedDate,
		&i.Pages,
		&i.Language,
		&i.CoverUrl,
		&i.RowNumber,
		&i.ShelfID,
	)
	return i, err
}

const getUnenrichedBooks = `-- name: GetUnenrichedBooks :many
SELECT isbn FROM books WHERE is_ai_enriched = 0
`

func (q *Queries) GetUnenrichedBooks(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUnenrichedBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var isbn int64
		if err := rows.Scan(&isbn); err != nil {
			return nil, err
		}
		items = append(items, isbn)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :exec
INSERT INTO books 
(isbn, title, description, publisher, published_date, pages, language, cover_url, row_number, shelf_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(isbn) DO UPDATE SET
    row_number = excluded.row_number,
    shelf_id = excluded.shelf_id
`

type InsertBookParams struct {
	Isbn          int64          `json:"isbn"`
	Title         sql.NullString `json:"title"`
	Description   sql.NullString `json:"description"`
	Publisher     sql.NullString `json:"publisher"`
	PublishedDate sql.NullString `json:"published_date"`
	Pages         sql.NullInt64  `json:"pages"`
	Language      sql.NullString `json:"language"`
	CoverUrl      sql.NullString `json:"cover_url"`
	RowNumber     sql.NullInt64  `json:"row_number"`
	ShelfID       sql.NullInt64  `json:"shelf_id"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) error {
	_, err := q.db.ExecContext(ctx, insertBook,
		arg.Isbn,
		arg.Title,
		arg.Description,
		arg.Publisher,
		arg.PublishedDate,
		arg.Pages,
		arg.Language,
		arg.CoverUrl,
		arg.RowNumber,
		arg.ShelfID,
	)
	return err
}

const markBookAsEnriched = `-- name: MarkBookAsEnriched :exec
UPDATE books SET is_ai_enriched = 1 WHERE isbn = ?
`

func (q *Queries) MarkBookAsEnriched(ctx context.Context, isbn int64) error {
	_, err := q.db.ExecContext(ctx, markBookAsEnriched, isbn)
	return err
}

const updateBookDescription = `-- name: UpdateBookDescription :exec
UPDATE books SET description = ? WHERE isbn = ? AND (description IS NULL OR description = '')
`

type UpdateBookDescriptionParams struct {
	Description sql.NullString `json:"description"`
	Isbn        int64          `json:"isbn"`
}

func (q *Queries) UpdateBookDescription(ctx context.Context, arg UpdateBookDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateBookDescription, arg.Description, arg.Isbn)
	return err
}

const updateBookPublishedDate = `-- name: UpdateBookPublishedDate :exec
UPDATE books SET published_date = ? WHERE isbn = ? AND (published_date IS NULL OR published_date = '')
`

type UpdateBookPublishedDateParams struct {
	PublishedDate sql.NullString `json:"published_date"`
	Isbn          int64          `json:"isbn"`
}

func (q *Queries) UpdateBookPublishedDate(ctx context.Context, arg UpdateBookPublishedDateParams) error {
	_, err := q.db.ExecContext(ctx, updateBookPublishedDate, arg.PublishedDate, arg.Isbn)
	return err
}

const updateBookTitle = `-- name: UpdateBookTitle :exec
UPDATE books SET title = ? WHERE isbn = ? AND (title IS NULL OR title = '')
`

type UpdateBookTitleParams struct {
	Title sql.NullString `json:"title"`
	Isbn  int64          `json:"isbn"`
}

func (q *Queries) UpdateBookTitle(ctx context.Context, arg UpdateBookTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateBookTitle, arg.Title, arg.Isbn)
	return err
}
