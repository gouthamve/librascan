// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authors_categories.sql

package db

import (
	"context"
	"database/sql"
)

const countAuthors = `-- name: CountAuthors :one
SELECT COUNT(*) FROM authors WHERE isbn = ?
`

func (q *Queries) CountAuthors(ctx context.Context, isbn sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAuthors, isbn)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCategories = `-- name: CountCategories :one
SELECT COUNT(*) FROM categories WHERE isbn = ?
`

func (q *Queries) CountCategories(ctx context.Context, isbn sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCategories, isbn)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAuthors = `-- name: GetAuthors :many
SELECT name FROM authors WHERE isbn = ?
`

func (q *Queries) GetAuthors(ctx context.Context, isbn sql.NullInt64) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAuthors, isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []sql.NullString{}
	for rows.Next() {
		var name sql.NullString
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategories = `-- name: GetCategories :many
SELECT name FROM categories WHERE isbn = ?
`

func (q *Queries) GetCategories(ctx context.Context, isbn sql.NullInt64) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []sql.NullString{}
	for rows.Next() {
		var name sql.NullString
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuthor = `-- name: InsertAuthor :exec
INSERT OR IGNORE INTO authors (isbn, name) VALUES (?, ?)
`

type InsertAuthorParams struct {
	Isbn sql.NullInt64  `json:"isbn"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) InsertAuthor(ctx context.Context, arg InsertAuthorParams) error {
	_, err := q.db.ExecContext(ctx, insertAuthor, arg.Isbn, arg.Name)
	return err
}

const insertCategory = `-- name: InsertCategory :exec
INSERT OR IGNORE INTO categories (isbn, name) VALUES (?, ?)
`

type InsertCategoryParams struct {
	Isbn sql.NullInt64  `json:"isbn"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertCategory, arg.Isbn, arg.Name)
	return err
}
